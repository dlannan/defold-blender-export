  // Positions can be world or local space, since world and normal
  // matrices are identity for world vertex space materials.
  // If world vertex space is selected, you can remove the
  // normal matrix multiplication for optimal performance.
  
  attribute highp vec4 position;
  attribute mediump vec2 texcoord0;
  attribute mediump vec2 texcoord1;
  attribute mediump vec3 normal;
  
  uniform mediump mat4 mtx_worldview;
  uniform mediump mat4 mtx_view;
  uniform mediump mat4 mtx_proj;
  uniform mediump mat4 mtx_normal;
  uniform mediump vec4 light;
  
  //uniform mediump vec4 camPos;
  
  // Original work by Martia A Saunders
  // https://dominium.maksw.com/articles/physically-based-rendering-pbr/pbr-part-one/
  
  // attribute vec3 aVertexTangent;
  
  varying vec3 vvLocalSurfaceNormal ;
  varying vec3 vvLocalSurfaceToLightDirection;
  varying vec3 vvLocalReflectedSurfaceToViewerDirection;
  varying vec3 vvLocalSurfaceToViewerDirection;
  varying vec2 vuvCoord0 ;
  varying vec2 vuvCoord1 ;
  varying vec2 vN;
  
  void main()
  {
      vec4 p = mtx_worldview * vec4(position.xyz, 1.0);
      vec3 vViewModelPosition = normalize( mtx_view * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
      vvLocalSurfaceToViewerDirection = normalize(vViewModelPosition - p.xyz) ;
  
      vec3 vLightModelPosition = vec3(mtx_view * vec4(light.xyz, 1.0));
      vvLocalSurfaceToLightDirection = normalize(vLightModelPosition - p.xyz);
  
      vvLocalSurfaceNormal = normalize((mtx_normal * vec4(normal, 0.0)).xyz);
      //	vvLocalSurfaceNormal = normalize(gl_Normal) ; // use the actual normal from the actual geometry
  
      vec3 vLocalSurfaceToViewerDirection = normalize(vViewModelPosition - p.xyz) ;
      vvLocalReflectedSurfaceToViewerDirection = normalize(reflect(vLocalSurfaceToViewerDirection, vvLocalSurfaceNormal)) ;

      vec3 e = p.xyz;
      vec3 n = vvLocalSurfaceNormal;

      vec3 r = reflect( e, n );
      float m = 2. * sqrt( pow( r.x, 2. ) + pow( r.y, 2. ) + pow( r.z + 1., 2. ) );
      vN = r.xy / m + .5;
      
      vuvCoord0 = texcoord0 ;
      vuvCoord1 = texcoord1 ;
      gl_Position = mtx_proj * p;
  }    
